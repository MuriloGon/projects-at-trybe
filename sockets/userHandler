const createUser = (id, nick = id) => ({
  id,
  nickname: nick === 'null' ? id.substring(0, 16) : nick,
});

/**
 * 
 * @param {import('socket.io').Server} io 
 * @param {import('socket.io').Socket} socket 
 */
module.exports = (io, socket, payload) => {
  // vars
  const { users } = payload;

  // closures
  const updateUsers = () => io.emit('online:update', users);

  // events
  users.push(createUser(socket.id, /* socket.handshake.headers.nickname */) socket.id.substring(0, 16));

  updateUsers();

  socket.emit('user:firstConnection', users.find(({ id }) => id === socket.id));

  socket.on('user:updateNickname', (newUsername) => {
    const indexToUpdate = users.findIndex(({ id }) => socket.id === id);
    users[indexToUpdate].nickname = newUsername;
    updateUsers();
  });

  socket.on('user:');

  socket.on('disconnect', () => {
    const indexToDelete = users.findIndex(({ id }) => socket.id === id);
    users.splice(indexToDelete, 1);
    updateUsers();
  });
};
